{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mirasys Development Server Setup Guide for Non-Technical Users","text":""},{"location":"#what-is-mirasys","title":"What is Mirasys?","text":"<p>Mirasys is our powerful application suite that helps organizations manage their video surveillance and security needs. This guide will help you understand what's needed to set up Mirasys for development and testing purposes.</p>"},{"location":"#computer-requirements-made-simple","title":"Computer Requirements Made Simple","text":"<p>To run Mirasys on your computer, you'll need:</p> <ul> <li>Computer Type: A modern desktop or laptop (less than 5 years old)</li> <li>Operating System: Ubuntu 20.04.6 LTS x86_64</li> <li>Processor: Intel i3 or better (similar to what's found in mid-range laptops)</li> <li>Memory: At least 20GB RAM (this ensures the system runs smoothly)</li> <li>Storage: At least 100GB of free disk space recommended</li> <li>Internet: A reliable internet connection (for mirasys to install and update)</li> </ul>"},{"location":"#software-youll-need","title":"Software You'll Need","text":"<ul> <li>Docker: This is a special program that helps run Mirasys in a controlled environment</li> <li>Administrator Access: You'll need the password that lets you make changes to the computer</li> </ul>"},{"location":"#simple-setup-process","title":"Simple Setup Process","text":"<ol> <li>Make sure your computer meets the requirements above</li> <li>Have Docker installed on your computer (IT team manage this)</li> <li>Use the detailed technical guide for the actual installation steps</li> </ol>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Once the system is set up properly by your technical team, you'll be able to demonstrate Mirasys to clients without worrying about the technical details behind it.</p> <p>For the actual installation process, please refer to the technical documentation or contact your IT department.</p>"},{"location":"defaultInstallation/","title":"Manual Installation","text":""},{"location":"defaultInstallation/#1-clean-previous-configurations-optional","title":"1. Clean Previous Configurations (Optional)","text":"<pre><code>rm -f .env docker-compose.yaml\n</code></pre>"},{"location":"defaultInstallation/#2-initialize-docker-images","title":"2. Initialize Docker Images","text":"<pre><code>sudo ./deploy.sh init-images\n</code></pre>"},{"location":"defaultInstallation/#3-build-and-deploy-the-application","title":"3. Build and Deploy the Application","text":"<pre><code>sudo ./deploy.sh development\n</code></pre>"},{"location":"defaultInstallation/#4-host-file-configuration","title":"4. Host File Configuration","text":"<p>Edit the host file to map service hostnames to localhost:</p> <pre><code>sudo nano /etc/hosts\n</code></pre> <p>Append the following entries:</p> <pre><code>127.0.0.1 phpmyadmin_mirasys.local\n127.0.0.1 mirasys_frontend_central.local\n127.0.0.1 mirasys_frnt.local\n127.0.0.1 mirasys_api_gateway.local\n127.0.0.1 mirasys_api_tenant_gateway.local\n127.0.0.1 mirasys_backend.local\n127.0.0.1 mirasys_stream.local\n127.0.0.1 traefik_mirasys.local\n127.0.0.1 rabbitmq.local\n127.0.0.1 infra.local\n</code></pre> <p>To save and exit:</p> <ul> <li>Press <code>Ctrl + X</code>, then <code>Y</code>, and hit <code>Enter</code>.</li> </ul>"},{"location":"defaultInstallation/#5-database-initialization","title":"5. Database Initialization","text":"<pre><code>./create-tenant-db.sh\n</code></pre>"},{"location":"defaultInstallation/#script-functionality-overview","title":"Script Functionality Overview","text":"Function Description <code>ls -lah /var/lib/mysql</code> Check existing MySQL storage <code>chown -R mysql:mysql /var/lib/mysql</code> Ensure MySQL file ownership <code>chmod -R 755 /var/lib/mysql</code> Set appropriate permissions Drop <code>mirasys</code>, <code>mirasys_tenant</code> databases Clean start Create fresh databases Prepares empty DBs Run Sequelize migrations Applies schema Seed databases Loads default data Import SQL schema Setup table structure Additional tenant migrations and seeds Enable multi-tenancy Install dependencies (<code>jq</code>, <code>curl</code>) Required tools for API interaction Login to GraphQL API Retrieve access token Send authenticated alert schema setup Initializes alert system"},{"location":"defaultInstallation/#6-accessing-the-application-dashboard","title":"6. Accessing the Application Dashboard","text":"<p>Open your browser and navigate to:</p> <pre><code>http://mirasys_frnt.local/\n</code></pre>"},{"location":"defaultInstallation/#7-troubleshooting","title":"7. Troubleshooting","text":"Issue Solution Docker command fails Ensure user is in the <code>docker</code> group DB migration errors Re-run <code>create-tenant-db.sh</code> and check MySQL logs Services not resolving Re-check <code>/etc/hosts</code> configuration"},{"location":"defaultInstallationAuto/","title":"Mirasys Installation &amp; Management Guide (Standalone)","text":""},{"location":"defaultInstallationAuto/#overview","title":"Overview","text":"<p>This document provides comprehensive, step-by-step instructions for installing, starting, stopping, and configuring Mirasys using the provided Bash script. It ensures a seamless setup process for both default and multi-domain installations. Additionally, it covers troubleshooting steps to resolve common issues.</p>"},{"location":"defaultInstallationAuto/#step-1-clone-the-project","title":"Step 1: Clone the Project","text":"<p>First, clone the repository containing the script and necessary setup files. Use the following commands:</p> <pre><code>git clone &lt;your-repo-url&gt;\ncd &lt;your-repo-folder&gt;\n</code></pre>"},{"location":"defaultInstallationAuto/#step-2-grant-execution-permissions","title":"Step 2: Grant Execution Permissions","text":"<p>Ensure the script and its supporting scripts have the necessary permissions to execute:</p> <pre><code>chmod +x mirasys.setup.sh\nchmod +x setupScript/*.sh\n</code></pre>"},{"location":"defaultInstallationAuto/#step-3-running-the-script","title":"Step 3: Running the Script","text":"<p>The script supports multiple commands and must always be run with sudo to ensure proper execution.</p>"},{"location":"defaultInstallationAuto/#1-install-mirasys","title":"1. Install Mirasys","text":"<p>When executing the installation command, the user is prompted to choose between a default installation.</p> <pre><code>sudo ./mirasys.setup.sh install\n</code></pre> <p>Installation Options</p> <ul> <li>Default Installation (d) :     o Removes existing configuration files.     o Initializes Docker images.     o Builds and deploys the application.     o Migrates databases.     o Configures the hosts file.     o Ensures the application is properly set up with default settings.</li> </ul>"},{"location":"defaultInstallationAuto/#optional-steps-for-restarting-the-application","title":"Optional Steps for Restarting the Application","text":"<p>To restart the application, follow these steps. The application must be stopped (down) before starting (start) again to avoid conflicts.</p>"},{"location":"defaultInstallationAuto/#2-start-mirasys-optional-for-restarting-the-application","title":"2. Start Mirasys (Optional, for restarting the application)","text":"<pre><code>sudo ./mirasys.setup.sh start\n</code></pre> <p>This command starts Mirasys using the deployment script, ensuring that all required services are properly initialized.</p>"},{"location":"defaultInstallationAuto/#3-stop-mirasys-optional-but-necessary-before-restarting","title":"3. Stop Mirasys (Optional, but necessary before restarting)","text":"<pre><code>sudo ./mirasys.setup.sh down\n</code></pre> <p>This command stops Mirasys gracefully, ensuring that all services are shut down properly before a restart.</p>"},{"location":"defaultInstallationAuto/#4-configure-mirasys-hosts-optional-to-ensure-correct-network-settings","title":"4. Configure Mirasys Hosts (Optional, to ensure correct network settings)","text":"<pre><code>sudo ./mirasys.setup.sh hostConfig\n</code></pre> <p>This applies necessary host configurations, updating the system\u2019s /etc/hosts file with the required entries.</p>"},{"location":"defaultInstallationAuto/#5-update-mirasys-optional-to-update-the-application-with-the-latest-settings","title":"5. Update Mirasys (Optional, to update the application with the latest settings)","text":"<pre><code>sudo ./mirasys.setup.sh update\n</code></pre>"},{"location":"defaultInstallationAuto/#troubleshooting","title":"Troubleshooting","text":"<p>If issues arise during installation, deployment, or operation, refer to the following troubleshooting steps.</p>"},{"location":"defaultInstallationAuto/#issues-related-to-host-configuration","title":"Issues Related to Host Configuration","text":"<ul> <li>If the host configuration does not apply correctly, ensure you have the necessary     permissions to modify /etc/hosts.</li> <li>Run the following command to manually check the hosts file: cat /etc/hosts</li> <li>If necessary, rerun the host configuration script: sudo ./mirasys.setup.sh     hostConfig</li> </ul>"},{"location":"defaultInstallationAuto/#general-issues-and-fixes","title":"General Issues and Fixes","text":"<ul> <li>Permission Errors: If you encounter permission-related errors, make sure the     script is always run with sudo: sudo ./mirasys.setup.sh  <li>Missing Dependencies: Ensure that all required dependencies (such as Docker     and Git) are installed before executing the script.</li> <li>Script Execution Failure: If any script fails during execution, check the logs for     detailed error messages and take appropriate action.</li>"},{"location":"defaultInstallationAuto/#contact-support","title":"Contact Support","text":"<p>For further assistance, reach out to your system administrator or the official support team.</p>"},{"location":"env/","title":"Mirasys Development Environment Setup","text":""},{"location":"env/#1-overview","title":"1. Overview","text":"<p>This document provides step-by-step instructions for setting up the Mirasys application in a local development environment on Ubuntu using Docker.</p>"},{"location":"env/#2-system-requirements","title":"2. System Requirements","text":"Requirement Details Operating System Ubuntu 20.04.6 LTS x86_64 Docker Must be installed User Permissions Sudo (administrator) privileges required Internet Access Required to download images and packages"},{"location":"env/#3-check-system-requirements","title":"3. Check System Requirements","text":"<p>To check if your system meets the requirements, run the following commands:</p> <p><pre><code>grep -o -w 'sse3\\|ssse3\\|sse4_1\\|sse4_2\\|popcnt\\|cx16\\|lahf_lm' /proc/cpuinfo | sort | uniq\n</code></pre> \ud83d\udfe2 Output example if compatible: <pre><code>cx16\nlahf_lm\npopcnt\nsse4_1\nsse4_2\nssse3\n</code></pre></p>"},{"location":"env/#4-docker-installation-ubuntu","title":"4. Docker Installation (Ubuntu)","text":"<p>To install Docker, run the following commands:</p> <p><pre><code>sudo apt update &amp;&amp; sudo apt install apt-transport-https ca-certificates curl software-properties-common\n</code></pre> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n</code></pre> <pre><code>echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \\\nhttps://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | \\\nsudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre> <pre><code>sudo apt update &amp;&amp; sudo apt install docker-ce docker-ce-cli containerd.io &amp;&amp; sudo groupadd docker &amp;&amp; sudo usermod -aG docker $USER\n</code></pre></p> <p>Note: Log out and log back in to apply group changes.</p> <p>To verify Docker installation:</p> <pre><code>sudo systemctl status docker\n</code></pre>"},{"location":"env/#5-application-setup","title":"5. Application Setup","text":"<p>Clone the Mirasys repository using one of the following commands:</p> <pre><code># Clone with specific branch\ngit clone &lt;YOUR_GIT_REPOSITORY_LINK&gt; -b &lt;BRANCH_NAME&gt;\n\n# Clone default branch\ngit clone &lt;YOUR_GIT_REPOSITORY_LINK&gt;\n</code></pre>"},{"location":"env/#6-permission-setup","title":"6. Permission Setup","text":"<p>After cloning the repository, navigate to the project directory and set the necessary permissions:</p> <pre><code>chmod +x mirasys.setup.sh &amp;&amp; \\\nchmod +x setupScript/*.sh &amp;&amp; \\\nchmod +x troubleshoot-system/*.sh\n</code></pre>"},{"location":"env_auto/","title":"Mirasys Environment Package","text":"<p>A comprehensive Debian package designed to streamline the setup and configuration of the Mirasys operational environment.</p>"},{"location":"env_auto/#overview","title":"Overview","text":"<p>The Mirasys Environment Package provides a standardized, ready-to-use environment for all Mirasys systems and applications. This package:</p> <ul> <li>Automatically configures system settings for optimal Mirasys application performance</li> <li>Installs and manages all necessary dependencies</li> <li>Sets up required system services and configurations</li> <li>Ensures consistent environments across different deployments</li> <li>Simplifies the installation and maintenance process</li> </ul> <p>By using this package, system administrators can ensure that all Mirasys applications run in a properly configured environment, reducing setup errors and improving operational reliability.</p>"},{"location":"env_auto/#version","title":"Version","text":"<p>Current version: 1.3.6</p> <p>Release date: May 28, 2025</p> <p>Update date: Jun 02, 2025</p> <p>Key features in this version: - Initial stable release with core environment configurations - Support for all current Mirasys applications - Automated dependency management - System optimization for Mirasys workloads</p>"},{"location":"env_auto/#installation","title":"Installation","text":""},{"location":"env_auto/#from-remote-repository","title":"From Remote Repository","text":"<p>To install the Mirasys Environment Package, follow these simple steps:</p> <p>Step 1: Download the latest release package from our remote repository:</p> <pre><code># Download the package\nwget https://github.com/mirasysbharat/mirasysfrontend/releases/download/v4.5.31-LTS/mirasys-env_1.3.6_all.deb\n</code></pre> <p>Step 2: Install the package using the Debian package manager:</p> <pre><code># Install directly\nsudo apt install ./mirasys-env_1.3.6_all.deb\n\n# If dependencies need to be resolved\nsudo apt install -f\n</code></pre> <p>Step 3: Verify the installation was successful:</p> <pre><code># Check installation status\nsudo dpkg -s mirasys-env | grep Status\n</code></pre> <p>You should see output confirming that the package is installed and properly configured.</p>"},{"location":"env_auto/#system-requirements","title":"System Requirements","text":"<ul> <li>Ubuntu 18.04 LTS or later / Debian 10 or later</li> <li>Minimum 2GB RAM (4GB recommended)</li> <li>500MB free disk space</li> <li>Internet connection (for dependency installation)</li> <li>Root or sudo privileges</li> </ul>"},{"location":"env_auto/#pre-installation","title":"Pre-Installation","text":"<p>Before installing the Mirasys Environment Package, ensure that your system meets the following requirements:</p> <ol> <li> <p>Supported Operating Systems:</p> <ul> <li>Ubuntu 18.04 LTS or later</li> <li>Debian 10 or later</li> </ul> </li> <li> <p>Hardware Requirements:</p> <ul> <li>Minimum 2GB RAM (4GB recommended)</li> <li>500MB free disk space</li> </ul> </li> <li> <p>Network Requirements:</p> <ul> <li>Internet connection (for dependency installation)</li> </ul> </li> <li> <p>User Permissions:</p> <ul> <li>Root or sudo privileges</li> </ul> </li> </ol>"},{"location":"env_auto/#post-installation","title":"Post-Installation","text":"<p>After installation, the system is automatically configured and ready to run Mirasys applications. No additional setup is required.</p> <p>To check the environment configuration, run:</p> <pre><code>mirasys-env\n</code></pre> <p>You will enter an interactive setup session. Typical flow:</p> <p>1) You\u2019ll be prompted to choose the Git URL type (HTTPS or SSH).    \u2013 Enter <code>1</code> for HTTPS (you\u2019ll then supply your tokenized URL).    \u2013 Enter <code>2</code> for SSH (you\u2019ll then supply the SSH URL).</p> <p>2) You\u2019ll be asked for the actual repository URL:    \u2013 Provide the HTTPS URL in the form <code>https://&lt;user&gt;:&lt;token&gt;@bitbucket.org/intellexio/mirasysindia_devops.git</code>,      or the SSH URL <code>git@bitbucket.org:intellexio/mirasysindia_devops.git</code>.  </p> <p>3) You\u2019ll be prompted for the installation directory (absolute or relative).    \u2013 The script converts it to an absolute path and creates it if missing.  </p> <p>4) You\u2019ll choose the Git branch (default <code>AUTOMATION_INSTALLATION_FINALIZED</code>).  </p> <p>Once inputs are complete, the script will:</p> <ul> <li>Clone the Mirasys repository into your chosen directory  </li> <li>Fix file ownership to your user  </li> <li>Install Docker if missing  </li> <li>Set execution permissions on setup scripts  </li> </ul> <p>At the end you will see:</p> <pre><code>\u2705 Ownership set to &lt;you&gt;.\n\u2705 Docker is already installed.      # or \u201cDocker installation complete\u201d\n\u2705 Permissions set successfully!\n\ud83d\ude80 Mirasys environment setup complete.\n\ud83d\udc49 To install Mirasys, run:\n    cd \"&lt;your-path&gt;/mirasysindia_devops\"\n    sudo ./mirasys.setup.sh install\n</code></pre>"},{"location":"git_management/","title":"Mirasys Git Strategy &amp; Release Management","text":""},{"location":"git_management/#1-main-branch-as-production","title":"1. Main Branch as Production","text":"<p>In the Mirasys workflow, the <code>main</code> branch serves as the production branch. All stable and production-ready code is merged into <code>main</code>.</p>"},{"location":"git_management/#2-version-based-releases","title":"2. Version-Based Releases","text":"<p>To maintain control over the <code>main</code> branch and enable structured deployments, Mirasys utilizes versioned branches and tagged releases. These releases help ensure consistency and traceability in production environments.</p>"},{"location":"git_management/#3-example-cloning-a-specific-version","title":"3. Example: Cloning a Specific Version","text":"<p>To work with a specific Mirasys version, such as <code>v4.0.0-lts (milestone4)</code>, clone the corresponding branch:</p> <pre><code>git clone -b v4.0.0-lts https://github.com/mirasys/repository.git\n</code></pre>"},{"location":"git_management/#4-release-artifacts","title":"4. Release Artifacts","text":"<p>Each release may include binary artifacts such as:</p> <pre><code>mirasys-env_1.2.4_all.deb\n</code></pre> <p>These files are bundled with the release and used for deployment and environment setup.</p>"},{"location":"git_management/#5-future-updates-via-tags","title":"5. Future Updates via Tags","text":"<p>Future LTS (Long-Term Support) updates are tracked using tags like <code>v4.0.2-lts</code>. To update, Mirasys simply needs to switch to the updated branch/tag:</p> <pre><code>git fetch --tags\ngit checkout v4.0.2-lts\n</code></pre> <p>This allows seamless migration to newer stable versions.</p>"},{"location":"git_management/#6-rollback-on-issues","title":"6. Rollback on Issues","text":"<p>If a new LTS release introduces issues, Mirasys can revert to a previous stable LTS version by switching branches:</p> <pre><code>git fetch --tags\ngit checkout v4.0.0-lts\n</code></pre> <p>This strategy ensures safe rollbacks and system stability.</p>"},{"location":"git_management/#summary","title":"Summary","text":"<ul> <li><code>main</code> = production-ready</li> <li>Versioned branches like <code>v4.0.0-lts</code> manage releases</li> <li><code>.deb</code> binaries are packaged with each release</li> <li>Tags/branches allow easy updates and rollback</li> </ul>"},{"location":"multiDomainInstallation/","title":"Multi-Domain Mirasys Setup","text":"<p>This guide helps you configure the Mirasys application with support for multiple custom domain names and ports.</p>"},{"location":"multiDomainInstallation/#1-get-the-project-files","title":"1. Get the Project Files","text":"<p>Clone the project repository:</p> <pre><code>git clone &lt;project_repository_link&gt;\n</code></pre>"},{"location":"multiDomainInstallation/#2-update-configuration-appenvdev","title":"2. Update Configuration (<code>app.env.dev</code>)","text":"<p>Update the following keys in your <code>app.env.dev</code> file to reflect your custom domain and port setup:</p> <pre><code># Environment configuration for Docker Compose\n#=============================================\n\n# Domain and port configuration\nDOMAIN=nagpur.mirasys.com\nSTATIC_PORT=8041\nPREFIX=nagpur\n\n# Service URLs\nPMA_URL=phpmyadmin.${DOMAIN}\nMIRASYS_FRNT_CENT_URL=frontend-central.${DOMAIN}\nMIRASYS_FRNT_URL=${DOMAIN}\nMIRASYS_FRNT_NEW_URL=frontend-new.demo.${DOMAIN}\nMIRASYS_API_GATEWAY_URL=api-gateway.${DOMAIN}\nMIRASYS_API_TENANT_GATEWAY_URL=tenant-apigateway.${DOMAIN}\nMIRASYS_BACKEND_URL=backend.${DOMAIN}\nMIRASYS_STREAM_URL=stream.${DOMAIN}\nTRAEFIK_URL=traefik.${DOMAIN}\nRABBITMQ_URL=rabbitmq.${DOMAIN}\nINFRA_URL=infra.${DOMAIN}\n\n# Database configuration\nMASTER_DATABASE=nagpur_mirasys_master\nROOT_PASSWORD=ows@123\nDATABASE_NAME=nagpur_mirasys_tenant\n\n# JWT configuration\nJWT_SECRET=&lt;your_jwt_secret&gt;\nJWT_EXPIRES_IN=14d\n\n# Frontend Central configuration\n#==============================\nREACT_APP_API_URL_CENTRAL=http://${MIRASYS_API_GATEWAY_URL}:${STATIC_PORT}/graphql\n\n# Frontend Tenant configuration\n#==============================\nREACT_APP_API_URL=http://${MIRASYS_API_TENANT_GATEWAY_URL}:${STATIC_PORT}/graphql\nREACT_APP_API_BASE_URL=http://${MIRASYS_API_TENANT_GATEWAY_URL}:${STATIC_PORT}/api/v1\nREACT_APP_IMAGE_URL=http://${MIRASYS_API_TENANT_GATEWAY_URL}:${STATIC_PORT}/uploads\nREACT_APP_GOOGLE_MAP_API_KEY=&lt;your_google_map_api_key&gt;\nREACT_APP_API_SOCKET_URL=http://${MIRASYS_API_TENANT_GATEWAY_URL}:${STATIC_PORT}\nREACT_APP_STREAM_URL=http://${MIRASYS_STREAM_URL}:${STATIC_PORT}\nREACT_APP_OPEN_STREET_API_KEY=&lt;your_open_street_api_key&gt;\n\n# API Central configuration\n#==============================\nCN_PORT=4001\nCN_DBUSERNAME=root\nCN_DBPASSWORD=${ROOT_PASSWORD}\nCN_DBDATABASE=${DATABASE_NAME}\nCN_DBHOST=db\nCN_CENTRAL_DB_USERNAME=root\nCN_CENTRAL_DB_PASSWORD=${ROOT_PASSWORD}\nCN_CENTRAL_DB_NAME=${MASTER_DATABASE}\nCN_CENTRAL_DBHOST=db\nCN_FRONT_END_URL=${MIRASYS_FRNT_CENT_URL}:${STATIC_PORT}\nCN_MAIL_DRIVER=smtp\nCN_MAIL_HOST=smtp.gmail.com\nCN_MAIL_PORT=587\nCN_MAIL_USERNAME=wellsyntest@gmail.com\nCN_MAIL_PASSWORD=onxdxumdzwuztipe\nCN_MAIL_ENCRYPTION=tls\nCN_MAIL_FROM_ADDRESS=wellsyntest@gmail.com\nCN_MAIL_FROM_NAME=Welldom TheraSync\nCN_EXISTING_API_URL=http://mirasys_backend:3001\n\n# API Tenant configuration\n#==============================\nTT_PORT=4001\nTT_DBUSERNAME=root\nTT_DBPASSWORD=${ROOT_PASSWORD}\nTT_DBDATABASE=${DATABASE_NAME}\nTT_DBHOST=db\nTT_CENTRAL_DB_USERNAME=root\nTT_CENTRAL_DB_PASSWORD=${ROOT_PASSWORD}\nTT_CENTRAL_DB_NAME=${MASTER_DATABASE}\nTT_CENTRAL_DBHOST=db\nTT_FRONT_END_URL=${MIRASYS_FRNT_URL}:${STATIC_PORT}\nTT_MAIL_DRIVER=smtp\nTT_MAIL_HOST=smtp.gmail.com\nTT_MAIL_PORT=587\nTT_MAIL_USERNAME=wellsyntest@gmail.com\nTT_MAIL_PASSWORD=onxdxumdzwuztipe\nTT_MAIL_ENCRYPTION=tls\nTT_MAIL_FROM_ADDRESS=wellsyntest@gmail.com\nTT_MAIL_FROM_NAME=Welldom TheraSync\nTT_EXISTING_API_URL=http://mirasys_backend:3001\nTT_API_SERVER_URL=http://${MIRASYS_API_TENANT_GATEWAY_URL}\nTT_UPLOAD_IMAGE_URL=http://mirasys_api_tenant_gateway:4001/uploads\nTT_VS_INFO_URL=http://172.18.0.1:6554/startvs\n\n# Backend configuration\n#==============================\nBE_PORT=3001\nBE_MYSQL_USER=root\nBE_MYSQL_ROOT_PASSWORD=${ROOT_PASSWORD}\nBE_MYSQL_DATABASE=${DATABASE_NAME}\nBE_MYSQL_LOCAL_PORT=3306\nBE_CENTRAL_DB_USERNAME=root\nBE_CENTRAL_DB_PASSWORD=${ROOT_PASSWORD}\nBE_CENTRAL_DB_NAME=${MASTER_DATABASE}\nBE_CENTRAL_DBHOST=db\nBE_MYSQL_HOST=db\nBE_APP_URL=${MIRASYS_BACKEND_URL}\n\n# elasticsearch configuration URLs\nELASTICSEARCH_URL=http://${PREFIX}_elasticsearch:9200\n</code></pre>"},{"location":"multiDomainInstallation/#3-edit-docker-configuration-docker-composelocalyaml","title":"3. Edit Docker Configuration (<code>docker-compose.local.yaml</code>)","text":"<p>Update the container names and port settings:</p> <pre><code>version: \"4.2.5\"\n\n# Define a reusable network configuration\nx-mirasys-network: &amp;mirasys-network\n  networks:\n    - mirasys-network\n\nservices:\n  {{C_PREFIX}}_traefik:\n    image: traefik:v3.0.0-beta5\n    container_name: {{C_PREFIX}}_traefik_mirasys\n    restart: unless-stopped\n    command:\n      - \"--log.level=DEBUG\"\n      - \"--api.insecure=true\"\n      - \"--providers.docker=true\"\n      - \"--providers.docker.exposedbydefault=false\"\n    ports:\n      - \"{{STATIC_PORT}}:80\"\n      - \"{{TRAEFIK_PORT}}:8080\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    depends_on:\n      - \"phpmyadmin\"\n      - \"{{C_PREFIX}}_infra\"\n      - \"{{C_PREFIX}}_mirasys_api_gateway\"\n      - \"{{C_PREFIX}}_mirasys_frontend_central\"\n      - \"{{C_PREFIX}}_mirasys_frnt\"\n      - \"{{C_PREFIX}}_mirasys_backend\"\n      - \"rabbitmq\"\n      - \"{{C_PREFIX}}_mirasys_streaming\"\n      - \"{{C_PREFIX}}_mirasys_api_tenant_gateway\"\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.{{C_PREFIX}}_traefik.rule=Host(`${TRAEFIK_URL}`)\"\n      - \"traefik.http.routers.{{C_PREFIX}}_traefik.service=api@internal\"\n      - \"traefik.http.routers.{{C_PREFIX}}_traefik.middlewares=traefik-auth\"\n      - \"traefik.http.middlewares.traefik-auth.basicauth.users=systemteam:$2a$10$1kocyz5oVBUYlojfFDatPeYgpyx8yM6ATVj/W2yE/E/fLTlRlXYSe\"\n    &lt;&lt;: *mirasys-network\n\n  {{C_PREFIX}}_infra:\n    build:\n      context: ./infra\n      dockerfile: Dockerfile\n    container_name: {{C_PREFIX}}_infra\n    restart: unless-stopped\n    depends_on:\n      - db\n    links:\n      - db\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./infra:/app\n      - ./mirasys_frnt:/mirasys_frnt\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.${C_PREFIX}_infra.rule=Host(`${INFRA_URL}`)\"\n      - \"traefik.http.services.${C_PREFIX}_infra.loadbalancer.server.port=5000\"\n    &lt;&lt;: *mirasys-network\n\n  {{C_PREFIX}}_mirasys_api_gateway:\n    build:\n      context: ./mirasys_api_gateway/\n      dockerfile: Dockerfile\n    container_name: {{C_PREFIX}}_mirasys_api_gateway\n    restart: unless-stopped\n    depends_on:\n      - db\n    links:\n      - db\n      - rabbitmq\n      - {{C_PREFIX}}_infra\n    volumes:\n      - ./mirasys_api_gateway:/app\n    environment:\n      - PORT=${CN_PORT}\n      - DBUSERNAME=${CN_DBUSERNAME}\n      - DBPASSWORD=${CN_DBPASSWORD}\n      - DBDATABASE=${CN_DBDATABASE}\n      - DBHOST=${CN_DBHOST}\n      - CENTRAL_DB_USERNAME=${CN_CENTRAL_DB_USERNAME}\n      - CENTRAL_DB_PASSWORD=${CN_CENTRAL_DB_PASSWORD}\n      - CENTRAL_DB_NAME=${CN_CENTRAL_DB_NAME}\n      - CENTRAL_DBHOST=${CN_CENTRAL_DBHOST}\n      - JWT_SECRET=${JWT_SECRET}\n      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}\n      - FRONT_END_URL=${CN_FRONT_END_URL}\n      - MAIL_DRIVER=${CN_MAIL_DRIVER}\n      - MAIL_HOST=${CN_MAIL_HOST}\n      - MAIL_PORT=${CN_MAIL_PORT}\n      - MAIL_USERNAME=${CN_MAIL_USERNAME}\n      - MAIL_PASSWORD=${CN_MAIL_PASSWORD}\n      - MAIL_ENCRYPTION=${CN_MAIL_ENCRYPTION}\n      - MAIL_FROM_ADDRESS=${CN_MAIL_FROM_ADDRESS}\n      - MAIL_FROM_NAME=${CN_MAIL_FROM_NAME}\n      - EXISTING_API_URL=${CN_EXISTING_API_URL}\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.{{C_PREFIX}}_mirasys_api_gateway.rule=Host(`${MIRASYS_API_GATEWAY_URL}`)\"\n      - \"traefik.http.services.{{C_PREFIX}}_mirasys_api_gateway.loadbalancer.server.port=4001\"\n    &lt;&lt;: *mirasys-network\n\n  {{C_PREFIX}}_mirasys_api_tenant_gateway:\n    build:\n      context: ./mirasys_api_tenant_gateway/\n      dockerfile: Dockerfile\n    container_name: {{C_PREFIX}}_mirasys_api_tenant_gateway\n    restart: unless-stopped\n    depends_on:\n      - db\n      - mongo\n    links:\n      - db\n      - rabbitmq\n      - {{C_PREFIX}}_infra\n    volumes:\n      - ./mirasys_api_tenant_gateway:/app\n    environment:\n      - PORT=${TT_PORT}\n      - DBUSERNAME=${TT_DBUSERNAME}\n      - DBPASSWORD=${TT_DBPASSWORD}\n      - DBDATABASE=${TT_DBDATABASE}\n      - DBHOST=${TT_DBHOST}\n      - CENTRAL_DB_USERNAME=${TT_CENTRAL_DB_USERNAME}\n      - CENTRAL_DB_PASSWORD=${TT_CENTRAL_DB_PASSWORD}\n      - CENTRAL_DB_NAME=${TT_CENTRAL_DB_NAME}\n      - CENTRAL_DBHOST=${TT_CENTRAL_DBHOST}\n      - JWT_SECRET=${JWT_SECRET}\n      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}\n      - FRONT_END_URL=${TT_FRONT_END_URL}\n      - MAIL_DRIVER=${TT_MAIL_DRIVER}\n      - MAIL_HOST=${TT_MAIL_HOST}\n      - MAIL_PORT=${TT_MAIL_PORT}\n      - MAIL_USERNAME=${TT_MAIL_USERNAME}\n      - MAIL_PASSWORD=${TT_MAIL_PASSWORD}\n      - MAIL_ENCRYPTION=${TT_MAIL_ENCRYPTION}\n      - MAIL_FROM_ADDRESS=${TT_MAIL_FROM_ADDRESS}\n      - MAIL_FROM_NAME=${TT_MAIL_FROM_NAME}\n      - EXISTING_API_URL=${TT_EXISTING_API_URL}\n      - API_SERVER_URL=${TT_API_SERVER_URL}\n      - UPLOAD_IMAGE_URL=${TT_UPLOAD_IMAGE_URL}\n      - VS_INFO_URL=${TT_VS_INFO_URL}\n      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.{{C_PREFIX}}_mirasys_api_tenant_gateway.rule=Host(`${MIRASYS_API_TENANT_GATEWAY_URL}`)\"\n      - \"traefik.http.services.{{C_PREFIX}}_mirasys_api_tenant_gateway.loadbalancer.server.port=4001\"\n    &lt;&lt;: *mirasys-network\n\n  {{C_PREFIX}}_mirasys_frnt:\n    build:\n      context: ./mirasys_frnt/\n      dockerfile: Dockerfile\n    container_name: {{C_PREFIX}}_mirasys_frnt\n    restart: unless-stopped\n    depends_on:\n      - db\n    links:\n      - db\n      - rabbitmq\n      - {{C_PREFIX}}_infra\n    volumes:\n      - ./mirasys_frnt:/app\n    environment:\n      - REACT_APP_API_URL=${REACT_APP_API_URL}\n      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}\n      - REACT_APP_IMAGE_URL=${REACT_APP_IMAGE_URL}\n      - REACT_APP_GOOGLE_MAP_API_KEY=${REACT_APP_GOOGLE_MAP_API_KEY}\n      - REACT_APP_API_SOCKET_URL=${REACT_APP_API_SOCKET_URL}\n      - REACT_APP_STREAM_URL=${REACT_APP_STREAM_URL}\n      - REACT_APP_OPEN_STREET_API_KEY=${REACT_APP_OPEN_STREET_API_KEY}\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.{{C_PREFIX}}_mirasys_frnt.rule=Host(`${MIRASYS_FRNT_URL}`)\"\n      - \"traefik.http.services.{{C_PREFIX}}_mirasys_frnt.loadbalancer.server.port=3000\"\n    &lt;&lt;: *mirasys-network\n\n  {{C_PREFIX}}_mirasys_frontend_central:\n    build:\n      context: ./mirasys_frontend_central/\n      dockerfile: Dockerfile\n    container_name: {{C_PREFIX}}_mirasys_frontend_central\n    restart: unless-stopped\n    depends_on:\n      - db\n    links:\n      - db\n      - rabbitmq\n      - {{C_PREFIX}}_infra\n    volumes:\n      - ./mirasys_frontend_central:/app\n    environment:\n      - REACT_APP_API_URL_CENTRAL=${REACT_APP_API_URL_CENTRAL}\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.{{C_PREFIX}}_mirasys_frontend_central.rule=Host(`${MIRASYS_FRNT_CENT_URL}`)\"\n      - \"traefik.http.services.{{C_PREFIX}}_mirasys_frontend_central.loadbalancer.server.port=3000\"\n    &lt;&lt;: *mirasys-network\n\n  {{C_PREFIX}}_mirasys_backend:\n    build:\n      context: ./mirasys_backend/\n      dockerfile: Dockerfile\n    container_name: {{C_PREFIX}}_mirasys_backend\n    restart: unless-stopped\n    depends_on:\n      - db\n    links:\n      - db\n      - rabbitmq\n      - {{C_PREFIX}}_infra\n    volumes:\n      - ./mirasys_backend:/app\n    environment:\n      - PORT=${BE_PORT}\n      - MYSQL_USER=${BE_MYSQL_USER}\n      - MYSQL_ROOT_PASSWORD=${BE_MYSQL_ROOT_PASSWORD}\n      - MYSQL_DATABASE=${BE_MYSQL_DATABASE}\n      - MYSQL_LOCAL_PORT=${BE_MYSQL_LOCAL_PORT}\n      - DBHOST=${BE_DBHOST}\n      - CENTRAL_DB_USERNAME=${BE_CENTRAL_DB_USERNAME}\n      - CENTRAL_DB_PASSWORD=${BE_CENTRAL_DB_PASSWORD}\n      - CENTRAL_DB_NAME=${BE_CENTRAL_DB_NAME}\n      - CENTRAL_DBHOST=${BE_CENTRAL_DBHOST}\n      - APP_URL=${BE_APP_URL}\n      - MYSQL_HOST=${BE_MYSQL_HOST}\n      - JWT_SECRET=${JWT_SECRET}\n      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.{{C_PREFIX}}_mirasys_backend.rule=Host(`${MIRASYS_BACKEND_URL}`)\"\n      - \"traefik.http.services.{{C_PREFIX}}_mirasys_backend.loadbalancer.server.port=3001\"\n    &lt;&lt;: *mirasys-network\n\n  {{C_PREFIX}}_mirasys_streaming:\n    build:\n      context: ./mirasys_streaming/\n      dockerfile: Dockerfile\n    container_name: {{C_PREFIX}}_mirasys_streaming\n    restart: unless-stopped\n    depends_on:\n      - db\n    links:\n      - db\n      - rabbitmq\n      - {{C_PREFIX}}_infra\n    volumes:\n      - ./mirasys_streaming:/app\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.{{C_PREFIX}}_mirasys_streaming.rule=Host(`${MIRASYS_STREAM_URL}`)\"\n      - \"traefik.http.services.{{C_PREFIX}}_mirasys_streaming.loadbalancer.server.port=2001\"\n    &lt;&lt;: *mirasys-network\n\n  db:\n    image: mysql:8.0\n    container_name: db\n    restart: unless-stopped\n    tty: true\n    environment:\n      MYSQL_DATABASE: ${MASTER_DATABASE}\n      MYSQL_ROOT_PASSWORD: ${ROOT_PASSWORD}\n    volumes:\n      - dbdata:/var/lib/mysql/\n    networks:\n      - mirasys-network\n\n  rabbitmq:\n    image: rabbitmq:3-management\n    container_name: rabbitmq\n    environment:\n      - RABBITMQ_DEFAULT_USER=ows\n      - RABBITMQ_DEFAULT_PASS=ows@123\n    restart: always\n    volumes:\n      - rabbitmq:/var/lib/rabbitmq/\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.rabbitmq.rule=Host(`${RABBITMQ_URL}`)\"\n      - \"traefik.http.services.rabbitmq.loadbalancer.server.port=15672\"\n    &lt;&lt;: *mirasys-network\n\n  phpmyadmin:\n    image: phpmyadmin/phpmyadmin\n    container_name: pma\n    links:\n      - db\n    environment:\n      PMA_HOST: db\n      PMA_PORT: 3306\n      PMA_ARBITRARY: 1\n      UPLOAD_LIMIT: 1024M\n      MAX_EXECUTION_TIME: 259200\n      MAX_INPUT_TIME: 259200\n      UPLOAD_MAX_FILE_SIZE: 750M\n      POST_MAX_SIZE: 750M\n    restart: always\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.phpmyadmin.rule=Host(`${PMA_URL}`)\"\n      - \"traefik.http.services.phpmyadmin.loadbalancer.server.port=80\"\n    &lt;&lt;: *mirasys-network\n\n  mongo:\n    image: mongo:latest\n    restart: unless-stopped\n    container_name: mongo\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: ${ROOT_PASSWORD}\n    volumes:\n      - mongodata:/data/db\n    &lt;&lt;: *mirasys-network\n\n  redis:\n    image: redis:latest\n    restart: unless-stopped\n    container_name: redis\n    volumes:\n      - redisdata:/data\n    &lt;&lt;: *mirasys-network\n\n  {{C_PREFIX}}_elasticsearch:\n    image: elasticsearch:8.17.4\n    restart: unless-stopped\n    container_name: {{C_PREFIX}}_elasticsearch\n    environment:\n      - discovery.type=single-node\n      - xpack.security.enabled=false\n    volumes:\n      - elasticsearchdata:/usr/share/elasticsearch/data\n    deploy:\n      resources:\n        limits:\n          memory: 4G # Adjust this according to your system\n        reservations:\n          memory: 2G\n    &lt;&lt;: *mirasys-network\n\nvolumes:\n  dbdata:\n  rabbitmq:\n  mongodata:\n  redisdata:\n  elasticsearchdata:\n\nnetworks:\n  mirasys-network:\n    external: true\n</code></pre> <p>Note: Make sure to replace <code>{{C_PREFIX}}</code> with your desired prefix for the containers. Ensure that the <code>docker-compose.dev.yaml</code> file is correctly configured with the necessary environment variables and paths.</p>"},{"location":"multiDomainInstallation/#4-deploy-the-project","title":"4. Deploy the Project","text":"<pre><code>sudo ./deploy.sh init-images &amp;&amp; \\\nsudo ./deploy.sh development\n</code></pre>"},{"location":"multiDomainInstallation/#5-configure-the-host-file","title":"5. Configure the Host File","text":"<pre><code>sudo nano /etc/hosts\n</code></pre> <p>Add the following:</p> <pre><code>127.0.0.1 phpmyadmin.demo.mirasys.in\n127.0.0.1 frontend-central.demo.mirasys.in\n127.0.0.1 demo.mirasys.in\n127.0.0.1 api-gateway.demo.mirasys.in\n127.0.0.1 tenant-api-gateway.demo.mirasys.in\n127.0.0.1 backend.demo.mirasys.in\n127.0.0.1 stream.demo.mirasys.in\n127.0.0.1 traefik.demo.mirasys.in\n127.0.0.1 rabbitmq.demo.mirasys.in\n127.0.0.1 infra.demo.mirasys.in\n</code></pre> <p>Press <code>CTRL+X</code>, then <code>Y</code>, then <code>ENTER</code> to save.</p>"},{"location":"multiDomainInstallation/#6-set-up-the-database","title":"6. Set Up the Database","text":"<pre><code>sudo ./create-tenant-db.sh\n</code></pre> <p>\u2705 Setup Completed!</p> <p>Your Mirasys system is now ready with multiple domain support.</p>"},{"location":"multiDomainInstallationAuto/","title":"Mirasys Installation &amp; Management Guide (Standalone)","text":""},{"location":"multiDomainInstallationAuto/#overview","title":"Overview","text":"<p>This document provides comprehensive, step-by-step instructions for installing, starting, stopping, and configuring Mirasys using the provided Bash script. It ensures a seamless setup process for both default and multi-domain installations. Additionally, it covers troubleshooting steps to resolve common issues.</p>"},{"location":"multiDomainInstallationAuto/#step-1-clone-the-project","title":"Step 1: Clone the Project","text":"<p>First, clone the repository containing the script and necessary setup files. Use the following commands:</p> <pre><code>git clone &lt;your-repo-url&gt;\ncd &lt;your-repo-folder&gt;\n</code></pre>"},{"location":"multiDomainInstallationAuto/#step-2-grant-execution-permissions","title":"Step 2: Grant Execution Permissions","text":"<p>Ensure the script and its supporting scripts have the necessary permissions to execute:</p> <pre><code>chmod +x mirasys.setup.sh\nchmod +x setupScript/*.sh\n</code></pre>"},{"location":"multiDomainInstallationAuto/#step-3-running-the-script","title":"Step 3: Running the Script","text":"<p>The script supports multiple commands and must always be run with sudo to ensure proper execution.</p>"},{"location":"multiDomainInstallationAuto/#1-install-mirasys","title":"1. Install Mirasys","text":"<p>When executing the installation command, the user is prompted to choose between a multi-domain installation.</p> <pre><code>sudo ./mirasys.setup.sh install\n</code></pre> <p>Installation Options</p> <ul> <li>Multi-Domain Installation (m) :     o Deletes existing configuration files before generating new ones.     o Dynamically generates configuration files based on user input:        \u25aa The script asks for essential details, including the domain name,           static port, database names, root password, Traefik port, and           container prefix.        \u25aa These inputs are used to populate template files (app.env.domain,           docker-compose.domain.yaml) with the correct values.        \u25aa Verifies that all generated configuration files are accurate before           proceeding with deployment.     o Deploys necessary services and initializes relevant database settings.     o Configures host settings to ensure smooth multi-domain operation.</li> </ul> <p>User Input Prompts</p> <p>During multi-domain installation, the user will be prompted to provide various configuration details, which will be used to generate the required configuration files:</p> <ul> <li> <p>Enter DOMAIN: example.com</p> </li> <li> <p>Enter Static Port: 8080</p> </li> <li>Enter Master Database Name: mirasys_master</li> <li>Enter Database Name: mirasys_db</li> <li>Enter Root Password: **</li> <li>Enter Traefik Port: 9090</li> <li>Enter Container Prefix: mirasys</li> </ul> <p>The provided information is crucial for configuring the system correctly, ensuring smooth operation and deployment.</p>"},{"location":"multiDomainInstallationAuto/#optional-steps-for-restarting-the-application","title":"Optional Steps for Restarting the Application","text":"<p>To restart the application, follow these steps. The application must be stopped (down) before starting (start) again to avoid conflicts.</p>"},{"location":"multiDomainInstallationAuto/#2-start-mirasys-optional-for-restarting-the-application","title":"2. Start Mirasys (Optional, for restarting the application)","text":"<pre><code>sudo ./mirasys.setup.sh start\n</code></pre> <p>This command starts Mirasys using the deployment script, ensuring that all required services are properly initialized.</p>"},{"location":"multiDomainInstallationAuto/#3-stop-mirasys-optional-but-necessary-before-restarting","title":"3. Stop Mirasys (Optional, but necessary before restarting)","text":"<pre><code>sudo ./mirasys.setup.sh down\n</code></pre> <p>This command stops Mirasys gracefully, ensuring that all services are shut down properly before a restart.</p>"},{"location":"multiDomainInstallationAuto/#4-configure-mirasys-hosts-optional-to-ensure-correct-network","title":"4. Configure Mirasys Hosts (Optional, to ensure correct network","text":""},{"location":"multiDomainInstallationAuto/#settings","title":"settings)","text":"<pre><code>sudo ./mirasys.setup.sh hostConfig\n</code></pre> <p>This applies necessary host configurations, updating the system\u2019s /etc/hosts file with the required entries.</p>"},{"location":"multiDomainInstallationAuto/#5-update-mirasys-optional-to-update-the-application-with-the-latest-settings","title":"5. Update Mirasys (Optional, to update the application with the latest settings)","text":"<pre><code>sudo ./mirasys.setup.sh update\n</code></pre>"},{"location":"multiDomainInstallationAuto/#troubleshooting","title":"Troubleshooting","text":"<p>If issues arise during installation, deployment, or operation, refer to the following troubleshooting steps.</p>"},{"location":"multiDomainInstallationAuto/#issues-related-to-host-configuration","title":"Issues Related to Host Configuration","text":"<ul> <li>If the host configuration does not apply correctly, ensure you have the necessary     permissions to modify /etc/hosts.</li> <li>Run the following command to manually check the hosts file: cat /etc/hosts</li> <li>If necessary, rerun the host configuration script: sudo ./mirasys.setup.sh     hostConfig</li> </ul>"},{"location":"multiDomainInstallationAuto/#general-issues-and-fixes","title":"General Issues and Fixes","text":"<ul> <li>Permission Errors: If you encounter permission-related errors, make sure the     script is always run with sudo: sudo ./mirasys.setup.sh  <li>Missing Dependencies: Ensure that all required dependencies (such as Docker     and Git) are installed before executing the script.</li> <li>Script Execution Failure: If any script fails during execution, check the logs for     detailed error messages and take appropriate action.</li>"},{"location":"multiDomainInstallationAuto/#contact-support","title":"Contact Support","text":"<p>For further assistance, reach out to your system administrator or the official support team.</p>"},{"location":"troubleshoot/","title":"Troubleshoot System Usage Documentation","text":""},{"location":"troubleshoot/#overview","title":"Overview","text":"<p>The troubleshoot-system is an interactive command-line tool designed to help diagnose and resolve common system issues within the Mirasys infrastructure. This tool provides categorized solutions for various error types and maintains a troubleshooting history log.</p>"},{"location":"troubleshoot/#directory-structure","title":"Directory Structure","text":"<pre><code>troubleshoot-system/\n\u251c\u2500\u2500 modules/              # Contains specialized troubleshooting modules\n\u2502   \u251c\u2500\u2500 common_utils.sh\n\u2502   \u251c\u2500\u2500 analytics_errors.sh\n\u2502   \u251c\u2500\u2500 application_errors.sh\n\u2502   \u251c\u2500\u2500 update_analytics_errors.sh\n\u2502   \u251c\u2500\u2500 alerts.sh\n\u2502   \u2514\u2500\u2500 mysql_permission_errors.sh\n\u251c\u2500\u2500 solutions/            # Contains solution files for specific issues\n\u251c\u2500\u2500 logs/                 # Stores troubleshooting history logs\n\u2514\u2500\u2500 troubleshoot.sh       # Main script\n</code></pre>"},{"location":"troubleshoot/#getting-started","title":"Getting Started","text":""},{"location":"troubleshoot/#running-the-script","title":"Running the Script","text":"<p>Navigate to the troubleshoot-system directory and run the main script:</p> <pre><code>cd troubleshoot-system/\nbash diagnose.sh\n</code></pre>"},{"location":"troubleshoot/#using-the-tool","title":"Using the Tool","text":"<p>The tool provides a menu-driven interface with color-coded options for better readability:</p>"},{"location":"troubleshoot/#main-menu","title":"Main Menu","text":"<p>When you start the tool, you'll see the main menu with these categories:</p> <ol> <li>Analytics Errors - For troubleshooting issues related to analytics functionality</li> <li>Application Errors - For diagnosing general application issues</li> <li>Alerts - For handling system alerts and notifications</li> <li>MySql Permissions Issue - For resolving database permission problems</li> <li>View Troubleshooting History - To review past troubleshooting actions</li> <li>Exit - To quit the tool</li> </ol>"},{"location":"troubleshoot/#workflow","title":"Workflow","text":"<ol> <li>Select a category by entering the corresponding number</li> <li>Follow the sub-menu options to identify your specific issue</li> <li>The system will display relevant solutions or guide you through the troubleshooting process</li> <li>All actions are automatically logged for future reference</li> </ol>"},{"location":"troubleshoot/#error-categories","title":"Error Categories","text":""},{"location":"troubleshoot/#1-analytics-errors","title":"1. Analytics Errors","text":"<p>This section addresses issues specific to the analytics system, such as: - \"Unknown error Analytics.is_challan in field list\" - Data processing failures - Report generation problems</p>"},{"location":"troubleshoot/#2-application-errors","title":"2. Application Errors","text":"<p>Common application errors that might occur in the Mirasys environment, including: - Runtime exceptions - Configuration issues - Service connectivity problems</p>"},{"location":"troubleshoot/#3-alerts","title":"3. Alerts","text":"<p>Tools for managing and responding to system alerts: - Alert acknowledgment - Alert investigation workflows - False positive handling</p>"},{"location":"troubleshoot/#4-mysql-permissions-issues","title":"4. MySQL Permissions Issues","text":"<p>Specialized solutions for database permission problems: - Access denied errors - Privilege escalation workflows - User permission management</p>"},{"location":"troubleshoot/#troubleshooting-history","title":"Troubleshooting History","text":"<p>The system maintains a detailed log of all troubleshooting actions in the <code>logs/troubleshoot_history.log</code> file. Each entry includes: - Timestamp of the action - Selected troubleshooting category and option - Actions performed</p> <p>You can view this history directly through the main menu by selecting option h.</p>"},{"location":"troubleshoot/#extending-the-tool","title":"Extending the Tool","text":"<p>The modular structure allows for easy extension:</p> <ol> <li>Add new module files to the <code>modules/</code> directory</li> <li>Source them in the main script</li> <li>Add corresponding menu options</li> </ol>"},{"location":"troubleshoot/#best-practices","title":"Best Practices","text":"<ol> <li>Always check the troubleshooting history before attempting to solve a recurring issue</li> <li>Follow the suggested solutions precisely</li> <li>Document any additional steps you took that weren't covered by the tool</li> <li>Report any new issues that should be added to the tool</li> </ol>"},{"location":"troubleshoot/#video-tutorials","title":"Video Tutorials","text":"Your browser does not support the video tag."},{"location":"version_control/","title":"Version List","text":"Version Type Notes Created At v4.1.12-lts LTS Up to milestone 4, this version is now stable. 2025-06-4"},{"location":"version_control/#notes","title":"Notes","text":"<ul> <li>LTS: Long Term Support version</li> </ul> <p>To add a new version, please follow the same format as above</p>"}]}